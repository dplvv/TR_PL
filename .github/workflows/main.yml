name: Kotlin Multiplatform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Workflow block for building Android
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android
        run: ./gradlew assembleRelease --info

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: composeApp/build/outputs/apk/release/*.apk

  # Workflow block for building iOS
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install CocoaPods
        run: pod install --project-directory=iosApp

      - name: Build iOS
        run: |
          xcodebuild -allowProvisioningUpdates \
            -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
            -scheme iosApp \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            build CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            DEVELOPMENT_TEAM=""

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: iosApp/build/Release-iphoneos/*.app

  # Workflow block for building Desktop
  build-desktop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Desktop
        run: ./gradlew desktopJar

      - name: Upload Desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-jar
          path: composeApp/build/libs/*.jar

  # Workflow block for building Web
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Web
        run: ./gradlew wasmJsBrowserDistribution

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: composeApp/build/dist/wasmJs/productionExecutable

  # Workflow block for generating artifact links
  generate-artifact-links:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-desktop, build-web]
    steps:
      - name: Generate Artifact Table
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get the run ID
          RUN_ID=$(echo "${{ github.run_id }}")
          REPO=${{ github.repository }}
          
          # Fetch the list of artifacts
          ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/artifacts")
          
          # Extract URLs for each artifact
          echo "| Platform | Artifact | Link |" > artifacts.md
          echo "|----------|----------|------|" >> artifacts.md
          for artifact in $(echo "$ARTIFACTS" | jq -r '.artifacts[] | "\(.name) \(.archive_download_url)"'); do
            NAME=$(echo $artifact | cut -d ' ' -f1)
            URL=$(echo $artifact | cut -d ' ' -f2)
            echo "| $NAME | Artifact | [Download]($URL) |" >> artifacts.md
          done
          cp artifacts.md README.md
